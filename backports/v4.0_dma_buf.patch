--- linux-4.1.52/include/linux/dma-buf.h	2018-05-28 04:26:45.000000000 +0200
+++ linux-4.0.9/include/linux/dma-buf.h	2015-07-21 19:10:57.000000000 +0200
@@ -163,33 +163,6 @@
 };
 
 /**
- * struct dma_buf_export_info - holds information needed to export a dma_buf
- * @exp_name:	name of the exporting module - useful for debugging.
- * @ops:	Attach allocator-defined dma buf ops to the new buffer
- * @size:	Size of the buffer
- * @flags:	mode flags for the file
- * @resv:	reservation-object, NULL to allocate default one
- * @priv:	Attach private data of allocator to this buffer
- *
- * This structure holds the information required to export the buffer. Used
- * with dma_buf_export() only.
- */
-struct dma_buf_export_info {
-	const char *exp_name;
-	const struct dma_buf_ops *ops;
-	size_t size;
-	int flags;
-	struct reservation_object *resv;
-	void *priv;
-};
-
-/**
- * helper macro for exporters; zeros and fills in most common values
- */
-#define DEFINE_DMA_BUF_EXPORT_INFO(a)	\
-	struct dma_buf_export_info a = { .exp_name = KBUILD_MODNAME }
-
-/**
  * get_dma_buf - convenience wrapper for get_file.
  * @dmabuf:	[in]	pointer to dma_buf
  *
@@ -208,7 +181,12 @@
 void dma_buf_detach(struct dma_buf *dmabuf,
 				struct dma_buf_attachment *dmabuf_attach);
 
-struct dma_buf *dma_buf_export(const struct dma_buf_export_info *exp_info);
+struct dma_buf *dma_buf_export_named(void *priv, const struct dma_buf_ops *ops,
+			       size_t size, int flags, const char *,
+			       struct reservation_object *);
+
+#define dma_buf_export(priv, ops, size, flags, resv)	\
+	dma_buf_export_named(priv, ops, size, flags, KBUILD_MODNAME, resv)
 
 int dma_buf_fd(struct dma_buf *dmabuf, int flags);
 struct dma_buf *dma_buf_get(int fd);
